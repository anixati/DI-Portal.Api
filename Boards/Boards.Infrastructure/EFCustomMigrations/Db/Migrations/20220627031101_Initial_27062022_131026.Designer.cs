// <auto-generated />
using System;
using Boards.Infrastructure.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCustomMigrations.Db.Migrations
{
    [DbContext(typeof(BoardsDbContext))]
    [Migration("20220627031101_Initial_27062022_131026")]
    partial class Initial_27062022_131026
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Dbo")
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16");

            modelBuilder.Entity("Boards.Domain.Boards.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Acronym")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("AppTeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApprovedUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AsstSecretaryId")
                        .HasColumnType("bigint");

                    b.Property<string>("AsstSecretaryPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("BoardStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Constitution")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<long?>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EstablishedByUnderId")
                        .HasColumnType("bigint");

                    b.Property<string>("EstablishedByUnderText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("ExcludeFromGenderBalance")
                        .HasColumnType("bit");

                    b.Property<string>("LegislationReference")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<int?>("MaximumMembers")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumTerms")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumMembers")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NominationCommittee")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("OptimumMembers")
                        .HasColumnType("int");

                    b.Property<long>("OwnerDivisionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerPositionId")
                        .HasColumnType("bigint");

                    b.Property<string>("PendingAction")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long>("PortfolioId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuorumRequired")
                        .HasColumnType("int");

                    b.Property<string>("QuorumRequiredText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("ReportingApproved")
                        .HasColumnType("bit");

                    b.Property<long?>("ResponsibleUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Summary")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AppTeamId");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("AsstSecretaryId");

                    b.HasIndex("BoardStatusId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EstablishedByUnderId");

                    b.HasIndex("OwnerDivisionId");

                    b.HasIndex("OwnerPositionId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Boards.Domain.Boards.Minister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Ministers");
                });

            modelBuilder.Entity("Boards.Domain.Boards.MinisterTerm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<long>("MinisterId")
                        .HasColumnType("bigint");

                    b.Property<long>("PortfolioId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("MinisterId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("MinisterTerms");
                });

            modelBuilder.Entity("Boards.Domain.Boards.Portfolio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.Appointee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Biography")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long?>("CapabilitiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ExecutiveSearch")
                        .HasColumnType("bit");

                    b.Property<long?>("ExperienceId")
                        .HasColumnType("bigint");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("IsAboriginal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRegional")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LinkedInProfile")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostNominals")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResumeLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CapabilitiesId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("Appointee");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.AppointeeSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AppointeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AppointeeId");

                    b.HasIndex("SkillId");

                    b.ToTable("AppointeeSkill");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.AssistantSecretary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("SkillTypeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Boards.Domain.Roles.BoardAppointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("ActingInRole")
                        .HasColumnType("bit");

                    b.Property<decimal?>("AnnumAmount")
                        .IsRequired()
                        .HasColumnType("decimal(13,2)");

                    b.Property<long>("AppointeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AppointmentSourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long>("BoardRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("BriefNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ExclGenderReport")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InitialStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsExOfficio")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<long?>("JudicialId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PrevTerms")
                        .HasColumnType("int");

                    b.Property<long>("RemunerationPeriodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SelectionProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AppointeeId");

                    b.HasIndex("AppointmentSourceId");

                    b.HasIndex("BoardId");

                    b.HasIndex("BoardRoleId");

                    b.HasIndex("JudicialId");

                    b.HasIndex("RemunerationPeriodId");

                    b.HasIndex("SelectionProcessId");

                    b.ToTable("BoardAppointments");
                });

            modelBuilder.Entity("Boards.Domain.Roles.BoardRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AppointerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssistantSecretaryId")
                        .HasColumnType("bigint");

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CabinetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CabinetDateType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExCoDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExCoDateType")
                        .HasColumnType("int");

                    b.Property<bool?>("ExcludeFromOrder15")
                        .HasColumnType("bit");

                    b.Property<bool?>("ExcludeGenderReport")
                        .HasColumnType("bit");

                    b.Property<long?>("IncumbentId")
                        .HasColumnType("bigint");

                    b.Property<string>("InstrumentLink")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("InternalNotes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool?>("IsApsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExNominated")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExOfficio")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsExecutive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignAppointment")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LetterToPmDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LetterToPmDateType")
                        .HasColumnType("int");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<long>("MinSubLocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("MinisterActionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MinisterOfficeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NextSteps")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("NotifyLetterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotifyLetterDateType")
                        .HasColumnType("int");

                    b.Property<string>("PDMSNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PaAmount")
                        .IsRequired()
                        .HasColumnType("decimal(13,2)");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<int>("PositionRemunerated")
                        .HasColumnType("int");

                    b.Property<long>("RemunerationMethodId")
                        .HasColumnType("bigint");

                    b.Property<string>("RemunerationTribunal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Term")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("VacantFromDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointerId");

                    b.HasIndex("AssistantSecretaryId");

                    b.HasIndex("BoardId");

                    b.HasIndex("IncumbentId");

                    b.HasIndex("MinSubLocationId");

                    b.HasIndex("PositionId");

                    b.HasIndex("RemunerationMethodId");

                    b.ToTable("BoardRoles");
                });

            modelBuilder.Entity("DI.Domain.App.AuditHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("AuditHistory");
                });

            modelBuilder.Entity("DI.Domain.App.AutoNumberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("AutoNumbers");
                });

            modelBuilder.Entity("DI.Domain.Config.AppConfigEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DI.Domain.Features.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EntityName", "EntityId")
                        .IsUnique();

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("DI.Domain.Features.DeleteRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EntityName", "EntityId")
                        .IsUnique();

                    b.ToTable("DeleteRecords");
                });

            modelBuilder.Entity("DI.Domain.Options.OptionKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("OptionKeys");
                });

            modelBuilder.Entity("DI.Domain.Options.OptionSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("OptionKeyId")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionKeyId");

                    b.ToTable("OptionSet");
                });

            modelBuilder.Entity("DI.Domain.Users.AppResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Resources", "acl");
                });

            modelBuilder.Entity("DI.Domain.Users.AppRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Roles", "acl");
                });

            modelBuilder.Entity("DI.Domain.Users.AppTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Teams", "acl");
                });

            modelBuilder.Entity("DI.Domain.Users.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailCount")
                        .HasColumnType("int");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockedOut")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users", "acl");
                });

            modelBuilder.Entity("DI.Domain.Users.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AppResourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppRoleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Create")
                        .HasColumnType("bit");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<int>("Mask")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppResourceId");

                    b.HasIndex("AppRoleId");

                    b.ToTable("Permissions", "acl");
                });

            modelBuilder.Entity("DI.Domain.Users.TeamRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AppRoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppTeamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("AppTeamId");

                    b.ToTable("TeamRoles", "acl");
                });

            modelBuilder.Entity("DI.Domain.Users.TeamUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AppTeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AppTeamId");

                    b.HasIndex("AppUserId");

                    b.ToTable("TeamUsers", "acl");
                });

            modelBuilder.Entity("DI.Domain.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AppRoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("AppUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserRoles", "acl");
                });

            modelBuilder.Entity("Boards.Domain.Boards.Board", b =>
                {
                    b.HasOne("DI.Domain.Users.AppTeam", "AppTeam")
                        .WithMany()
                        .HasForeignKey("AppTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Users.AppUser", "ApprovedUser")
                        .WithMany()
                        .HasForeignKey("ApprovedUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Boards.Domain.Contacts.AssistantSecretary", "AsstSecretary")
                        .WithMany()
                        .HasForeignKey("AsstSecretaryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DI.Domain.Options.OptionSet", "BoardStatus")
                        .WithMany()
                        .HasForeignKey("BoardStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DI.Domain.Options.OptionSet", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DI.Domain.Options.OptionSet", "EstablishedByUnder")
                        .WithMany()
                        .HasForeignKey("EstablishedByUnderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DI.Domain.Options.OptionSet", "OwnerDivision")
                        .WithMany()
                        .HasForeignKey("OwnerDivisionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Options.OptionSet", "OwnerPosition")
                        .WithMany()
                        .HasForeignKey("OwnerPositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Boards.Domain.Boards.Portfolio", "Portfolio")
                        .WithMany("Boards")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Users.AppUser", "ResponsibleUser")
                        .WithMany()
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApprovedUser");

                    b.Navigation("AppTeam");

                    b.Navigation("AsstSecretary");

                    b.Navigation("BoardStatus");

                    b.Navigation("Division");

                    b.Navigation("EstablishedByUnder");

                    b.Navigation("OwnerDivision");

                    b.Navigation("OwnerPosition");

                    b.Navigation("Portfolio");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("Boards.Domain.Boards.Minister", b =>
                {
                    b.OwnsOne("DI.Domain.Owned.AddressType", "PostalAddress", b1 =>
                        {
                            b1.Property<long>("MinisterId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<short>("Postcode")
                                .HasColumnType("smallint");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MinisterId");

                            b1.ToTable("Ministers");

                            b1.WithOwner()
                                .HasForeignKey("MinisterId");
                        });

                    b.OwnsOne("DI.Domain.Owned.AddressType", "StreetAddress", b1 =>
                        {
                            b1.Property<long>("MinisterId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<short>("Postcode")
                                .HasColumnType("smallint");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MinisterId");

                            b1.ToTable("Ministers");

                            b1.WithOwner()
                                .HasForeignKey("MinisterId");
                        });

                    b.Navigation("PostalAddress");

                    b.Navigation("StreetAddress");
                });

            modelBuilder.Entity("Boards.Domain.Boards.MinisterTerm", b =>
                {
                    b.HasOne("Boards.Domain.Boards.Minister", "Minister")
                        .WithMany("Terms")
                        .HasForeignKey("MinisterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Boards.Domain.Boards.Portfolio", "Portfolio")
                        .WithMany("Terms")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Minister");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.Appointee", b =>
                {
                    b.HasOne("DI.Domain.Options.OptionSet", "Capabilities")
                        .WithMany()
                        .HasForeignKey("CapabilitiesId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DI.Domain.Options.OptionSet", "Experience")
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("DI.Domain.Owned.AddressType", "PostalAddress", b1 =>
                        {
                            b1.Property<long>("AppointeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<short>("Postcode")
                                .HasColumnType("smallint");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AppointeeId");

                            b1.ToTable("Appointee");

                            b1.WithOwner()
                                .HasForeignKey("AppointeeId");
                        });

                    b.OwnsOne("DI.Domain.Owned.AddressType", "StreetAddress", b1 =>
                        {
                            b1.Property<long>("AppointeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<short>("Postcode")
                                .HasColumnType("smallint");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AppointeeId");

                            b1.ToTable("Appointee");

                            b1.WithOwner()
                                .HasForeignKey("AppointeeId");
                        });

                    b.Navigation("Capabilities");

                    b.Navigation("Experience");

                    b.Navigation("PostalAddress");

                    b.Navigation("StreetAddress");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.AppointeeSkill", b =>
                {
                    b.HasOne("Boards.Domain.Contacts.Appointee", "Appointee")
                        .WithMany("AppointeeSkills")
                        .HasForeignKey("AppointeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Boards.Domain.Contacts.Skill", "Skill")
                        .WithMany("AppointeeSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointee");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.AssistantSecretary", b =>
                {
                    b.OwnsOne("DI.Domain.Owned.AddressType", "PostalAddress", b1 =>
                        {
                            b1.Property<long>("AssistantSecretaryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<short>("Postcode")
                                .HasColumnType("smallint");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AssistantSecretaryId");

                            b1.ToTable("Secretaries");

                            b1.WithOwner()
                                .HasForeignKey("AssistantSecretaryId");
                        });

                    b.OwnsOne("DI.Domain.Owned.AddressType", "StreetAddress", b1 =>
                        {
                            b1.Property<long>("AssistantSecretaryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<short>("Postcode")
                                .HasColumnType("smallint");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AssistantSecretaryId");

                            b1.ToTable("Secretaries");

                            b1.WithOwner()
                                .HasForeignKey("AssistantSecretaryId");
                        });

                    b.Navigation("PostalAddress");

                    b.Navigation("StreetAddress");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.Skill", b =>
                {
                    b.HasOne("DI.Domain.Options.OptionSet", "SkillType")
                        .WithMany()
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Boards.Domain.Roles.BoardAppointment", b =>
                {
                    b.HasOne("Boards.Domain.Contacts.Appointee", "Appointee")
                        .WithMany()
                        .HasForeignKey("AppointeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Options.OptionSet", "AppointmentSource")
                        .WithMany()
                        .HasForeignKey("AppointmentSourceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Boards.Domain.Boards.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Boards.Domain.Roles.BoardRole", "BoardRole")
                        .WithMany()
                        .HasForeignKey("BoardRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Options.OptionSet", "Judicial")
                        .WithMany()
                        .HasForeignKey("JudicialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DI.Domain.Options.OptionSet", "RemunerationPeriod")
                        .WithMany()
                        .HasForeignKey("RemunerationPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Options.OptionSet", "SelectionProcess")
                        .WithMany()
                        .HasForeignKey("SelectionProcessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Appointee");

                    b.Navigation("AppointmentSource");

                    b.Navigation("Board");

                    b.Navigation("BoardRole");

                    b.Navigation("Judicial");

                    b.Navigation("RemunerationPeriod");

                    b.Navigation("SelectionProcess");
                });

            modelBuilder.Entity("Boards.Domain.Roles.BoardRole", b =>
                {
                    b.HasOne("DI.Domain.Options.OptionSet", "Appointer")
                        .WithMany()
                        .HasForeignKey("AppointerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Boards.Domain.Contacts.AssistantSecretary", null)
                        .WithMany("Roles")
                        .HasForeignKey("AssistantSecretaryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Boards.Domain.Boards.Board", "Board")
                        .WithMany("Roles")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Boards.Domain.Contacts.Appointee", "Incumbent")
                        .WithMany("Roles")
                        .HasForeignKey("IncumbentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DI.Domain.Options.OptionSet", "MinSubLocation")
                        .WithMany()
                        .HasForeignKey("MinSubLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Options.OptionSet", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Options.OptionSet", "RemunerationMethod")
                        .WithMany()
                        .HasForeignKey("RemunerationMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointer");

                    b.Navigation("Board");

                    b.Navigation("Incumbent");

                    b.Navigation("MinSubLocation");

                    b.Navigation("Position");

                    b.Navigation("RemunerationMethod");
                });

            modelBuilder.Entity("DI.Domain.Options.OptionSet", b =>
                {
                    b.HasOne("DI.Domain.Options.OptionKey", "OptionKey")
                        .WithMany("Values")
                        .HasForeignKey("OptionKeyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OptionKey");
                });

            modelBuilder.Entity("DI.Domain.Users.AppUser", b =>
                {
                    b.OwnsOne("DI.Domain.Owned.AddressType", "PostalAddress", b1 =>
                        {
                            b1.Property<long>("AppUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<short>("Postcode")
                                .HasColumnType("smallint");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AppUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.OwnsOne("DI.Domain.Owned.AddressType", "StreetAddress", b1 =>
                        {
                            b1.Property<long>("AppUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<short>("Postcode")
                                .HasColumnType("smallint");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Unit")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AppUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("PostalAddress");

                    b.Navigation("StreetAddress");
                });

            modelBuilder.Entity("DI.Domain.Users.Permission", b =>
                {
                    b.HasOne("DI.Domain.Users.AppResource", "AppResource")
                        .WithMany("Permissions")
                        .HasForeignKey("AppResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Users.AppRole", "AppRole")
                        .WithMany("Permissions")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppResource");

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("DI.Domain.Users.TeamRole", b =>
                {
                    b.HasOne("DI.Domain.Users.AppRole", "AppRole")
                        .WithMany("TeamRoles")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Users.AppTeam", "AppTeam")
                        .WithMany("TeamRoles")
                        .HasForeignKey("AppTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppTeam");
                });

            modelBuilder.Entity("DI.Domain.Users.TeamUser", b =>
                {
                    b.HasOne("DI.Domain.Users.AppTeam", "AppTeam")
                        .WithMany("TeamUsers")
                        .HasForeignKey("AppTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Users.AppUser", "AppUser")
                        .WithMany("UserTeams")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppTeam");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DI.Domain.Users.UserRole", b =>
                {
                    b.HasOne("DI.Domain.Users.AppRole", "AppRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DI.Domain.Users.AppUser", "AppUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Boards.Domain.Boards.Board", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Boards.Domain.Boards.Minister", b =>
                {
                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Boards.Domain.Boards.Portfolio", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.Appointee", b =>
                {
                    b.Navigation("AppointeeSkills");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.AssistantSecretary", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Boards.Domain.Contacts.Skill", b =>
                {
                    b.Navigation("AppointeeSkills");
                });

            modelBuilder.Entity("DI.Domain.Options.OptionKey", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("DI.Domain.Users.AppResource", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("DI.Domain.Users.AppRole", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("TeamRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DI.Domain.Users.AppTeam", b =>
                {
                    b.Navigation("TeamRoles");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("DI.Domain.Users.AppUser", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
